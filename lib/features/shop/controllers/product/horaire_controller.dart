import 'package:get/get.dart';
import '../../../../data/repositories/horaire/horaire_repository.dart';
import '../../models/horaire_model.dart';
import '../../models/jour_semaine.dart';

class HoraireController extends GetxController {
  final HoraireRepository repository;
  final RxList<Horaire> horaires = <Horaire>[].obs;
  final RxBool isLoading = false.obs;
  final RxBool hasHoraires = false.obs;

  HoraireController(this.repository);

  // Initialiser les horaires vides pour un √©tablissement donn√©
  void initializeHoraires(String etablissementId) {
    try {
      final horairesVides = JourSemaine.values
          .map((jour) => Horaire(
                etablissementId: etablissementId,
                jour: jour,
                estOuvert: false,
                ouverture: null, // null quand ferm√©
                fermeture: null, // null quand ferm√©
              ))
          .toList();

      horaires.assignAll(horairesVides);
      hasHoraires.value = false;
      horaires.refresh();
      print(
          '‚úÖ ${horaires.length} horaires initialis√©s pour l\'√©tablissement $etablissementId');
    } catch (e) {
      print('‚ùå Erreur initialisation horaires: $e');
    }
  }

  // Initialiser les horaires vides pour la cr√©ation
  void initializeHorairesForCreation() {
    final horairesVides = JourSemaine.values
        .map((jour) => Horaire(
              etablissementId: 'temp_id',
              jour: jour,
              estOuvert: false,
              ouverture: null, // null quand ferm√©
              fermeture: null, // null quand ferm√©
            ))
        .toList();

    horaires.assignAll(horairesVides);
    hasHoraires.value = false;
    horaires.refresh();
    print('‚úÖ ${horaires.length} horaires initialis√©s pour cr√©ation');
  }

  // Cr√©er les horaires pour un √©tablissement
  Future<bool> createHoraires(
      String etablissementId, List<Horaire> horairesList) async {
    try {
      isLoading.value = true;

      final horairesAvecVraiId = horairesList
          .map((horaire) => horaire.copyWith(
                etablissementId: etablissementId,
              ))
          .toList();

      await repository.createHorairesForEtablissement(
          etablissementId, horairesAvecVraiId);
      horaires.assignAll(horairesAvecVraiId);
      hasHoraires.value = horairesAvecVraiId.any((h) => h.isValid);
      horaires.refresh();

      print(
          '‚úÖ ${horairesAvecVraiId.length} horaires cr√©√©s pour l\'√©tablissement $etablissementId');
      return true;
    } catch (e) {
      _logError('cr√©ation des horaires', e);
      return false;
    } finally {
      isLoading.value = false;
    }
  }

  // R√©cup√©rer les horaires depuis la base - CORRIG√âE
  Future<List<Horaire>?> fetchHoraires(String etablissementId) async {
    try {
      isLoading.value = true;
      final horairesList =
          await repository.getHorairesByEtablissement(etablissementId);

      // MAINTENANT: On aura toujours des horaires (soit existants, soit cr√©√©s par d√©faut)
      horaires.assignAll(horairesList);
      hasHoraires.value = horairesList.any((h) => h.isValid);
      horaires.refresh();

      print(
          '‚úÖ ${horairesList.length} horaires charg√©s pour l\'√©tablissement $etablissementId');

      // V√©rification
      if (horairesList.length != 7) {
        print('‚ö†Ô∏è Attention: ${horairesList.length}/7 jours trouv√©s');
      } else {
        print('üéâ Tous les 7 jours sont pr√©sents !');

        // Debug: Afficher l'√©tat de chaque jour
        for (final horaire in horairesList) {
          print(
              '   üìÖ ${horaire.jour.valeur}: ${horaire.estOuvert ? "Ouvert" : "Ferm√©"} ${horaire.estOuvert ? "(${horaire.ouverture} - ${horaire.fermeture})" : ""}');
        }
      }

      return horairesList;
    } catch (e) {
      _logError('r√©cup√©ration des horaires', e);
      return null;
    } finally {
      isLoading.value = false;
    }
  }

  // Mettre √† jour un horaire sp√©cifique
  Future<bool> updateHoraire(Horaire horaire) async {
    try {
      // Mettre √† jour localement d'abord
      final index = horaires.indexWhere((h) => h.id == horaire.id);
      if (index != -1) {
        horaires[index] = horaire;
      } else {
        final indexByDay = horaires.indexWhere((h) => h.jour == horaire.jour);
        if (indexByDay != -1) {
          horaires[indexByDay] = horaire;
        } else {
          // Ajouter si pas trouv√©
          horaires.add(horaire);
        }
      }

      hasHoraires.value = horaires.any((h) => h.isValid);
      horaires.refresh();

      // Sauvegarder en base si l'horaire a un ID
      if (horaire.id != null) {
        await repository.updateHoraire(horaire);
        print(
            '‚úÖ Horaire ${horaire.jour.valeur} mis √† jour (ID: ${horaire.id})');
      } else {
        print(
            '‚ÑπÔ∏è Horaire ${horaire.jour.valeur} mis √† jour localement (pas d\'ID)');
      }

      return true;
    } catch (e) {
      _logError('mise √† jour de l\'horaire', e);
      return false;
    }
  }

  // Mettre √† jour tous les horaires
  Future<bool> updateAllHoraires(
      String etablissementId, List<Horaire> newHoraires) async {
    try {
      isLoading.value = true;
      await repository.updateAllHoraires(etablissementId, newHoraires);
      horaires.assignAll(newHoraires);
      hasHoraires.value = newHoraires.any((h) => h.isValid);
      horaires.refresh();

      final nbJoursOuverts = nombreJoursOuverts;
      print(
          '‚úÖ ${newHoraires.length} horaires mis √† jour ($nbJoursOuverts jours ouverts)');
      return true;
    } catch (e) {
      _logError('mise √† jour de tous les horaires', e);
      return false;
    } finally {
      isLoading.value = false;
    }
  }

  // Supprimer tous les horaires
  Future<bool> clearHoraires(String etablissementId) async {
    try {
      isLoading.value = true;
      await repository.deleteHorairesByEtablissement(etablissementId);
      horaires.clear();
      hasHoraires.value = false;
      horaires.refresh();

      print(
          '‚úÖ Tous les horaires supprim√©s pour l\'√©tablissement $etablissementId');
      return true;
    } catch (e) {
      _logError('suppression des horaires', e);
      return false;
    } finally {
      isLoading.value = false;
    }
  }

  // Obtenir l'horaire d'un jour donn√©
  Horaire? getHoraireForDay(JourSemaine jour) {
    try {
      return horaires.firstWhere((horaire) => horaire.jour == jour);
    } catch (_) {
      return null;
    }
  }

  // V√©rifier si l'√©tablissement est ouvert un jour donn√©
  bool isOpenOnDay(JourSemaine jour) {
    final horaire = getHoraireForDay(jour);
    return horaire != null && horaire.isValid;
  }

  // Nombre total de jours ouverts
  int get nombreJoursOuverts =>
      horaires.where((horaire) => horaire.isValid).length;

  // V√©rifier si l'√©tablissement est ouvert maintenant
  bool get isOpenNow {
    if (!hasHoraires.value || horaires.isEmpty) return false;

    final now = DateTime.now();
    final today = _getJourSemaineFromDateTime(now);
    final currentTime =
        '${now.hour.toString().padLeft(2, '0')}:${now.minute.toString().padLeft(2, '0')}';

    final horaireAujourdhui = getHoraireForDay(today);
    if (horaireAujourdhui == null || !horaireAujourdhui.isValid) return false;

    return _isTimeBetween(currentTime, horaireAujourdhui.ouverture!,
        horaireAujourdhui.fermeture!);
  }

  // Obtenir les horaires d'aujourd'hui
  Horaire? get horaireAujourdhui {
    final today = _getJourSemaineFromDateTime(DateTime.now());
    return getHoraireForDay(today);
  }

  // Statut d'ouverture en texte
  String get openStatus {
    if (!hasHoraires.value) return "Horaires non d√©finis";
    return isOpenNow ? "Ouvert" : "Ferm√©";
  }

  // Obtenir un r√©sum√© textuel des horaires
  String get resumeHoraires {
    if (!hasHoraires.value) return "Aucun horaire d√©fini";

    final joursOuverts = horaires.where((h) => h.isValid).toList();
    if (joursOuverts.isEmpty) return "√âtablissement ferm√©";

    return "${joursOuverts.length} jour(s) ouvert(s) par semaine";
  }

  // Fonctions utilitaires priv√©es
  JourSemaine _getJourSemaineFromDateTime(DateTime date) {
    switch (date.weekday) {
      case 1:
        return JourSemaine.lundi;
      case 2:
        return JourSemaine.mardi;
      case 3:
        return JourSemaine.mercredi;
      case 4:
        return JourSemaine.jeudi;
      case 5:
        return JourSemaine.vendredi;
      case 6:
        return JourSemaine.samedi;
      case 7:
        return JourSemaine.dimanche;
      default:
        return JourSemaine.lundi;
    }
  }

  bool _isTimeBetween(String currentTime, String startTime, String endTime) {
    try {
      final current = _timeToMinutes(currentTime);
      final start = _timeToMinutes(startTime);
      final end = _timeToMinutes(endTime);
      return current >= start && current <= end;
    } catch (e) {
      return false;
    }
  }

  int _timeToMinutes(String time) {
    try {
      final parts = time.split(':');
      return int.parse(parts[0]) * 60 + int.parse(parts[1]);
    } catch (e) {
      return 0;
    }
  }

  void _logError(String action, Object error) {
    print('‚ùå Erreur lors de la $action: $error');
  }

  // M√©thode pour v√©rifier l'√©tat du contr√¥leur
  void debugState() {
    print('=== DEBUG HoraireController ===');
    print('Horaires charg√©s: ${horaires.length}');
    print('Jours ouverts: $nombreJoursOuverts');
    print('HasHoraires: ${hasHoraires.value}');
    print('IsOpenNow: $isOpenNow');
    print('==============================');
  }
}
